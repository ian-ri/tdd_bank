// Code generated by MockGen. DO NOT EDIT.
// Source: account_service.go

// Package account_service is a generated GoMock package.
package account_service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountService is a mock of AccountService interface
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockAccountService) Open(accountName string, initialAmount int64) error {
	ret := m.ctrl.Call(m, "Open", accountName, initialAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockAccountServiceMockRecorder) Open(accountName, initialAmount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAccountService)(nil).Open), accountName, initialAmount)
}

// CheckBalance mocks base method
func (m *MockAccountService) CheckBalance(accountName string) (int64, error) {
	ret := m.ctrl.Call(m, "CheckBalance", accountName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBalance indicates an expected call of CheckBalance
func (mr *MockAccountServiceMockRecorder) CheckBalance(accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBalance", reflect.TypeOf((*MockAccountService)(nil).CheckBalance), accountName)
}

// Withdraw mocks base method
func (m *MockAccountService) Withdraw(accountName string, amount int64) error {
	ret := m.ctrl.Call(m, "Withdraw", accountName, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw
func (mr *MockAccountServiceMockRecorder) Withdraw(accountName, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAccountService)(nil).Withdraw), accountName, amount)
}

// AnyAccountExists mocks base method
func (m *MockAccountService) AnyAccountExists() bool {
	ret := m.ctrl.Call(m, "AnyAccountExists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AnyAccountExists indicates an expected call of AnyAccountExists
func (mr *MockAccountServiceMockRecorder) AnyAccountExists() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnyAccountExists", reflect.TypeOf((*MockAccountService)(nil).AnyAccountExists))
}

// AccountExists mocks base method
func (m *MockAccountService) AccountExists(accountName string) bool {
	ret := m.ctrl.Call(m, "AccountExists", accountName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AccountExists indicates an expected call of AccountExists
func (mr *MockAccountServiceMockRecorder) AccountExists(accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountExists", reflect.TypeOf((*MockAccountService)(nil).AccountExists), accountName)
}
